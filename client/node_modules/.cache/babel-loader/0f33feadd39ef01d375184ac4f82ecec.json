{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALEX\\\\Downloads\\\\TicketTracerForServiceCenter-master\\\\TicketTracerForServiceCenter-master\\\\client\\\\src\\\\components\\\\List_User_Tickets.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\n\nconst List_User_Tickets = ({\n  setAuth\n}) => {\n  const [tickets, setTickets] = useState([]);\n\n  const getTickets = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/dashboard/tickets/\", {\n        method: \"GET\",\n        headers: {\n          token: localStorage.token\n        }\n      });\n      const jsonData = await response.json();\n      setTickets(jsonData);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  useEffect(() => {\n    getTickets();\n  }, []);\n  console.log(tickets);\n\n  function sortTable() {\n    var table,\n        rows,\n        switching,\n        i,\n        x,\n        y,\n        shouldSwitch,\n        dir,\n        switchcount = 0;\n    table = document.getElementById(\"myTable\");\n    switching = true; //Set the sorting direction to ascending:\n\n    dir = \"asc\";\n    /*Make a loop that will continue until\r\n    no switching has been done:*/\n\n    while (switching) {\n      //start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /*Loop through all table rows (except the\r\n      first, which contains table headers):*/\n\n      for (i = 1; i < rows.length - 1; i++) {\n        //start by saying there should be no switching:\n        shouldSwitch = false;\n        /*Get the two elements you want to compare,\r\n        one from current row and one from the next:*/\n\n        x = rows[i].getElementsByTagName(\"TD\")[n];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n        /*check if the two rows should switch place,\r\n        based on the direction, asc or desc:*/\n\n        if (dir == \"asc\") {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir == \"desc\") {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            //if so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldSwitch) {\n        /*If a switch has been marked, make the switch\r\n        and mark that a switch has been done:*/\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true; //Each time a switch is done, increase this count by 1:\n\n        switchcount++;\n      } else {\n        /*If no switching has been done AND the direction is \"asc\",\r\n        set the direction to \"desc\" and run the while loop again.*/\n        if (switchcount == 0 && dir == \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, \" List of User Tickets \"), \" \", /*#__PURE__*/React.createElement(\"table\", {\n    id: \"userList\",\n    className: \"table mt-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, \" ID \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \" ID OWNER \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \" ID ASSIGNED \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, \" ID ISSUE \"), /*#__PURE__*/React.createElement(\"th\", {\n    onClick: \"sortTable()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \" INFORMATION \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, \" DATE OPEN \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, \" DATE CLOSED \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \" STATUS \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \" PRIORITY \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, \" STATUS \"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, tickets.map(ticket => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }, ticket.ticket_id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    }\n  }, ticket.ticket_owner_id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, ticket.ticket_assigned_employee_id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  }, ticket.ticket_issue_id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  }, ticket.ticket_information), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 29\n    }\n  }, ticket.ticket_date_open), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  }, ticket.ticket_date_closed), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, ticket.ticket_status), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }\n  }, ticket.ticket_priority), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }, ticket.ticket_rating))))));\n};\n\nexport default List_User_Tickets;","map":{"version":3,"sources":["C:/Users/ALEX/Downloads/TicketTracerForServiceCenter-master/TicketTracerForServiceCenter-master/client/src/components/List_User_Tickets.js"],"names":["React","Fragment","useState","useEffect","toast","List_User_Tickets","setAuth","tickets","setTickets","getTickets","response","fetch","method","headers","token","localStorage","jsonData","json","err","console","log","message","sortTable","table","rows","switching","i","x","y","shouldSwitch","dir","switchcount","document","getElementById","length","getElementsByTagName","n","innerHTML","toLowerCase","parentNode","insertBefore","map","ticket","ticket_id","ticket_owner_id","ticket_assigned_employee_id","ticket_issue_id","ticket_information","ticket_date_open","ticket_date_closed","ticket_status","ticket_priority","ticket_rating"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst List_User_Tickets = ({ setAuth }) => {\r\n\r\n    const [tickets, setTickets] = useState([]);\r\n\r\n    const getTickets = async() => {\r\n        try {\r\n\r\n            const response = await fetch(\"http://localhost:5000/dashboard/tickets/\",{\r\n                method: \"GET\",\r\n                headers: { token: localStorage.token },\r\n              });\r\n            \r\n            \r\n            \r\n            \r\n            const jsonData = await response.json() \r\n\r\n            \r\n            setTickets(jsonData);\r\n        } catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getTickets();\r\n    }, []);\r\n\r\n    console.log(tickets);\r\n\r\n    function sortTable() {\r\n        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\r\n        table = document.getElementById(\"myTable\");\r\n        switching = true;\r\n        //Set the sorting direction to ascending:\r\n        dir = \"asc\"; \r\n        /*Make a loop that will continue until\r\n        no switching has been done:*/\r\n        while (switching) {\r\n          //start by saying: no switching is done:\r\n          switching = false;\r\n          rows = table.rows;\r\n          /*Loop through all table rows (except the\r\n          first, which contains table headers):*/\r\n          for (i = 1; i < (rows.length - 1); i++) {\r\n            //start by saying there should be no switching:\r\n            shouldSwitch = false;\r\n            /*Get the two elements you want to compare,\r\n            one from current row and one from the next:*/\r\n            x = rows[i].getElementsByTagName(\"TD\")[n];\r\n            y = rows[i + 1].getElementsByTagName(\"TD\")[n];\r\n            /*check if the two rows should switch place,\r\n            based on the direction, asc or desc:*/\r\n            if (dir == \"asc\") {\r\n              if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n                //if so, mark as a switch and break the loop:\r\n                shouldSwitch= true;\r\n                break;\r\n              }\r\n            } else if (dir == \"desc\") {\r\n              if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\r\n                //if so, mark as a switch and break the loop:\r\n                shouldSwitch = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (shouldSwitch) {\r\n            /*If a switch has been marked, make the switch\r\n            and mark that a switch has been done:*/\r\n            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n            switching = true;\r\n            //Each time a switch is done, increase this count by 1:\r\n            switchcount ++;      \r\n          } else {\r\n            /*If no switching has been done AND the direction is \"asc\",\r\n            set the direction to \"desc\" and run the while loop again.*/\r\n            if (switchcount == 0 && dir == \"asc\") {\r\n              dir = \"desc\";\r\n              switching = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n    return(\r\n        <Fragment>\r\n            <h1> List of User Tickets </h1>\r\n            {\" \"}\r\n            <table id=\"userList\" className=\"table mt-5 text-center\">\r\n                <thead>\r\n                    <tr>\r\n                        <th> ID </th>\r\n                        <th> ID OWNER </th>\r\n                        <th> ID ASSIGNED </th>\r\n                        <th> ID ISSUE </th>\r\n                        <th onClick=\"sortTable()\"> INFORMATION </th>\r\n                        <th> DATE OPEN </th>\r\n                        <th> DATE CLOSED </th>\r\n                        <th> STATUS </th>\r\n                        <th> PRIORITY </th>\r\n                        <th> STATUS </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/*<tr>\r\n                        <td> ID </td>\r\n                        <td> ID </td>\r\n                        <td> ID </td>\r\n                        <td> ID </td>\r\n                        <td> Info </td>\r\n                        <td> Date_open </td> \r\n                        <td> Date_closed </td>\r\n                        <td> Status </td>\r\n                        <td> Priority </td>\r\n                        <td> Status </td> \r\n                    </tr>  */}\r\n                    {tickets.map (ticket => (\r\n                        <tr>\r\n                            <td >{ticket.ticket_id}</td>\r\n                            <td>{ticket.ticket_owner_id}</td>\r\n                            <td>{ticket.ticket_assigned_employee_id}</td>\r\n                            <td>{ticket.ticket_issue_id}</td>\r\n                            <td>{ticket.ticket_information}</td>\r\n                            <td>{ticket.ticket_date_open}</td>\r\n                            <td>{ticket.ticket_date_closed}</td>\r\n                            <td>{ticket.ticket_status}</td>\r\n                            <td>{ticket.ticket_priority}</td>\r\n                            <td>{ticket.ticket_rating}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            \r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default List_User_Tickets;"]},"metadata":{},"sourceType":"module"}